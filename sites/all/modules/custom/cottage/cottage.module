<?php
// Custom Module for Cottage Hill Station custom fucntions
// Author :  Omar Zorrilla Llerena
// emai   : omarzorrillallerena@gmail.com


//THIS FUNCTION ADD AN (ADD TO CART BUTTON TO EACH NODE AFTER BEING CREATED)
$order_condition=0;

function cottage_node_postinsert($node){

  $type = $node->type;

      switch ($type) {
        case 'menu':

        //node
        //field_data_field_menu_variants
        //commerce_product
        
       $query = db_select('field_data_field_menu_variants', 'n')
        ->fields('n', array('field_menu_variants_product_id'))
        ->condition('entity_id', $node->nid,'=');
        $result = $query->execute();
        $product_id = $result->fetchField();
        
        $query = db_select('field_data_body', 'n')
        ->fields('n', array('entity_id'))
        ->condition('entity_id', $node->nid,'=');
        $result = $query->execute();
        $data = $result->fetchField();
        
        if(empty($data)){
          $result = db_insert('field_data_body')
          ->fields(array(
            'entity_type' => 'node',
            'bundle' => 'menu',
            'deleted'  => 0,
            'entity_id' => $node->nid,
            'revision_id' => $node->nid,
            'language' => 'und',
            'delta' => 0,
            'body_value' => '[product-button:'./*$node->nid*/$product_id.' title=Add to Cart]',
            //'body_value' => '[product-button:1 title=Add to Cart]',
            'body_format' => 'panopoly_html_text',
          ))
          ->execute();
          //dpm($nid);
        }else{
          
        $query = db_select('field_data_body', 'n')
        ->fields('n', array('body_value'))
       // ->condition('entity_id', $node->nid,'=')
        ->condition('entity_id', $node->nid,'=');        
        $result = $query->execute();
        $body = $result->fetchField();          
          
          
          
          $table_updated = db_update('field_data_body') // 
           ->fields(array(
           'body_value' => $body.'<br>'.'[product-button:'./*$node->nid*/$product_id.' title=Add to Cart]',    
           'body_format' => 'panopoly_html_text',
           ))
           ->condition('entity_id', $node->nid,'=')
           ->execute();
        }
          break;
        
      }
 
}



//THIS 2 FUNCTIONS BELOW ADD PRODUCT TYPE TO EACH PRODUCT AT THE BEGGINING OF THE PRODUCT NAME
function cottage_commerce_line_item_type_info_alter(&$line_item_types) {
  $line_item_types['product']['callbacks'] = array('title' => '_cottage_commerce_product_line_item_title');
}

/**
* Returns an appropriate title for this line item for this site
*/
function _cottage_commerce_product_line_item_title($line_item) {
       $query = db_select('field_data_commerce_product', 'n')
        ->fields('n', array('commerce_product_product_id'))
        ->condition('entity_id', $line_item->line_item_id,'=');
        $result = $query->execute();
        $var = $result->fetchField();
  
       $query = db_select('field_data_field_menu_variants', 'n')
        ->fields('n', array('entity_id'))
        ->condition('field_menu_variants_product_id', $var,'=');
        $result = $query->execute();
        $product_id = $result->fetchField();

       $query = db_select('node', 'n')
        ->fields('n', array('title'))
        ->condition('nid', $product_id,'=');
        $result = $query->execute();
        $product_name = $result->fetchField();

 if ($product = entity_metadata_wrapper('commerce_line_item', $line_item)->commerce_product->value()) {
  if (isset($line_item->data['alt_title'])){
    return check_plain($line_item->data['alt_title']);
}else{
    $alt_title = $product_name;

 global $user;
$uid = $user->uid;  
$order_id = commerce_cart_order_id($uid);
  $pname = array();
          $pname = _cottage_get_saved_sides_per_order($order_id);
 
          $lid = array();
          $lid = _cottage_get_saved_skus_per_order($order_id);//json_decode($Lid);
 for($i=0; $i< sizeof($pname); $i++) {
          if($line_item->line_item_label==$lid[$i]){
            $pname_side=array();
            
            $pname_side= json_decode(/*utf8_encode(*/$pname[$i]/*)*/,true);
            if(!empty($pname_side)){//explode("<br>",$pname[$i]);
            
                    $temp="";
                    foreach ($pname_side as $key => $value) {
                        $temp = $temp  . "<br>".((int)$key+1).")". rawurldecode($pname_side[$key]);//. "<br>";
                    }
                    $product->title = '<b>'.$alt_title  . ':</b> '. $product->title . $temp;/*."<br><b>Side: </b>"*///.$pname[$i];
      
            if($i<count($pname))$i++;
            }else{
               $product->title = '<b>'.$alt_title  . ':</b> '. $product->title ;
            }
          }else{
            $product->title = '<b>'.$alt_title  . ':</b> '. $product->title ;
          }
}
      return  $product->title;// . "  <br>".$side;//$y ;

 }
}
}

function _cottage_get_saved_sides_per_order($order_id){
        $query = db_select('commerce_line_item', 'n')
        ->fields('n', array('side'))
        ->condition('order_id', $order_id,'=')
        ->isNotNull('side');
        
        $result = $query->execute();
        $sides_in_order = $result->fetchAllAssoc('side',PDO::FETCH_ASSOC);
        
        if (is_array($sides_in_order) || is_object($sides_in_order))
        {
        foreach ($sides_in_order as $key => $value) {
          if (empty($value)) {
             unset($sides_in_order[$key]);
          }
        }
        }
        $it = new RecursiveIteratorIterator(new RecursiveArrayIterator($sides_in_order));
        $list = iterator_to_array($it,false);
        
        if (!empty($list)){
             return $list;
          }

}

function _cottage_get_saved_skus_per_order($order_id){
        $query = db_select('commerce_line_item', 'n')
        ->fields('n', array('line_item_label'))
        ->condition('order_id', $order_id,'=')
        ->isNotNull('side');
        
        $result = $query->execute();
        $sides_in_order = $result->fetchAllAssoc('line_item_label',PDO::FETCH_ASSOC);
        if (is_array($sides_in_order) || is_object($sides_in_order))
        {
        foreach ($sides_in_order as $key => $value) {
          if (empty($value)) {
             unset($sides_in_order[$key]);
          }
        }
        }
        $it = new RecursiveIteratorIterator(new RecursiveArrayIterator($sides_in_order));
        $list = iterator_to_array($it,false);
        
        if (!empty($list)){
             return $list;
          }
          
}